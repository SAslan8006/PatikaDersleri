<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac.Extensions.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeConfigurationAdapter">
            <summary>
            Configuration adapter for <see cref="T:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory" />.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeConfigurationAdapter.Add(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Adds a configuration action that will be executed when the child <see cref="T:Autofac.ILifetimeScope"/> is created.
            </summary>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the container.</param>
            <exception cref="T:System.ArgumentNullException">Throws when the passed configuration-action is null.</exception>
        </member>
        <member name="P:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeConfigurationAdapter.ConfigurationActions">
            <summary>
            Gets the list of configuration actions to be executed on the <see cref="T:Autofac.ContainerBuilder"/> for the child <see cref="T:Autofac.ILifetimeScope"/>.
            </summary>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory">
            <summary>
            A factory for creating a <see cref="T:System.IServiceProvider"/> that wraps a child <see cref="T:Autofac.ILifetimeScope"/> created from an existing parent <see cref="T:Autofac.ILifetimeScope"/>.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory.#ctor(System.Func{Autofac.ILifetimeScope},System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory"/> class.
            </summary>
            <param name="rootLifetimeScopeAccessor">A function to retrieve the root <see cref="T:Autofac.ILifetimeScope"/> instance.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the container.</param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory.#ctor(Autofac.ILifetimeScope,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory"/> class.
            </summary>
            <param name="rootLifetimeScope">The root <see cref="T:Autofac.ILifetimeScope"/> instance.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the container.</param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a container builder from an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The collection of services.</param>
            <returns>A container builder that can be used to create an <see cref="T:System.IServiceProvider" />.</returns>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeServiceProviderFactory.CreateServiceProvider(Autofac.Extensions.DependencyInjection.AutofacChildLifetimeScopeConfigurationAdapter)">
            <summary>
            Creates an <see cref="T:System.IServiceProvider" /> from the container builder.
            </summary>
            <param name="containerBuilder">The adapter holding configuration applied to <see cref="T:Autofac.ContainerBuilder"/> creating the <see cref="T:System.IServiceProvider"/>.</param>
            <returns>An <see cref="T:System.IServiceProvider" />.</returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacRegistration">
            <summary>
            Extension methods for registering ASP.NET Core dependencies with Autofac.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.Populate(Autofac.ContainerBuilder,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})">
            <summary>
            Populates the Autofac container builder with the set of registered service descriptors
            and makes <see cref="T:System.IServiceProvider"/> and <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>
            available in the container.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which the registrations should be made.
            </param>
            <param name="descriptors">
            The set of service descriptors to register in the container.
            </param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.Populate(Autofac.ContainerBuilder,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor},System.Object)">
            <summary>
            Populates the Autofac container builder with the set of registered service descriptors
            and makes <see cref="T:System.IServiceProvider"/> and <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>
            available in the container. Using this overload is incompatible with the ASP.NET Core
            support for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1"/>.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which the registrations should be made.
            </param>
            <param name="descriptors">
            The set of service descriptors to register in the container.
            </param>
            <param name="lifetimeScopeTagForSingletons">
            If provided and not <see langword="null"/> then all registrations with lifetime <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> are registered
            using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
            with provided <paramref name="lifetimeScopeTagForSingletons"/>
            instead of using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance"/>.
            </param>
            <remarks>
            <para>
            Specifying a <paramref name="lifetimeScopeTagForSingletons"/> addresses a specific case where you have
            an application that uses Autofac but where you need to isolate a set of services in a child scope. For example,
            if you have a large application that self-hosts ASP.NET Core items, you may want to isolate the ASP.NET
            Core registrations in a child lifetime scope so they don't show up for the rest of the application.
            This overload allows that. Note it is the developer's responsibility to execute this and create an
            <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/> using the child lifetime scope.
            </para>
            </remarks>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.ConfigureLifecycle``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Object)">
            <summary>
            Configures the lifecycle on a service registration.
            </summary>
            <typeparam name="TActivatorData">The activator data type.</typeparam>
            <typeparam name="TRegistrationStyle">The object registration style.</typeparam>
            <param name="registrationBuilder">The registration being built.</param>
            <param name="lifecycleKind">The lifecycle specified on the service registration.</param>
            <param name="lifetimeScopeTagForSingleton">
            If not <see langword="null"/> then all registrations with lifetime <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> are registered
            using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
            with provided <paramref name="lifetimeScopeTagForSingleton"/>
            instead of using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance"/>.
            </param>
            <returns>
            The <paramref name="registrationBuilder" />, configured with the proper lifetime scope,
            and available for additional configuration.
            </returns>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacRegistration.Register(Autofac.ContainerBuilder,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor},System.Object)">
            <summary>
            Populates the Autofac container builder with the set of registered service descriptors.
            </summary>
            <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder"/> into which the registrations should be made.
            </param>
            <param name="descriptors">
            The set of service descriptors to register in the container.
            </param>
            <param name="lifetimeScopeTagForSingletons">
            If not <see langword="null"/> then all registrations with lifetime <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> are registered
            using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
            with provided <paramref name="lifetimeScopeTagForSingletons"/>
            instead of using <see cref="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance"/>.
            </param>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider">
            <summary>
            Autofac implementation of the ASP.NET Core <see cref="T:System.IServiceProvider"/>.
            </summary>
            <seealso cref="T:System.IServiceProvider" />
            <seealso cref="T:Microsoft.Extensions.DependencyInjection.ISupportRequiredService" />
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/> class.
            </summary>
            <param name="lifetimeScope">
            The lifetime scope from which services will be resolved.
            </param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.GetRequiredService(System.Type)">
            <summary>
            Gets service of type <paramref name="serviceType" /> from the
            <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider" /> and requires it be present.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType" />.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException">
            Thrown if the <paramref name="serviceType" /> isn't registered with the container.
            </exception>
            <exception cref="T:Autofac.Core.DependencyResolutionException">
            Thrown if the object can't be resolved from the container.
            </exception>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.IsService(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType" />; or <see langword="null" />
            if there is no service object of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="P:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.LifetimeScope">
            <summary>
            Gets the underlying instance of <see cref="T:Autofac.ILifetimeScope" />.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProvider.DisposeAsync">
            <summary>
            Performs a dispose operation asynchronously.
            </summary>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory">
            <summary>
            A factory for creating a <see cref="T:Autofac.ContainerBuilder"/> and an <see cref="T:System.IServiceProvider" />.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.#ctor(Autofac.Builder.ContainerBuildOptions,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory"/> class.
            </summary>
            <param name="containerBuildOptions">The container options to use when building the container.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the container.</param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.#ctor(System.Action{Autofac.ContainerBuilder})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory"/> class.
            </summary>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the container..</param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates a container builder from an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The collection of services.</param>
            <returns>A container builder that can be used to create an <see cref="T:System.IServiceProvider" />.</returns>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory.CreateServiceProvider(Autofac.ContainerBuilder)">
            <summary>
            Creates an <see cref="T:System.IServiceProvider" /> from the container builder.
            </summary>
            <param name="containerBuilder">The container builder.</param>
            <returns>An <see cref="T:System.IServiceProvider" />.</returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceScope">
            <summary>
            Autofac implementation of the ASP.NET Core <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope"/>.
            </summary>
            <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" />
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScope.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceScope"/> class.
            </summary>
            <param name="lifetimeScope">
            The lifetime scope from which services should be resolved for this service scope.
            </param>
        </member>
        <member name="P:Autofac.Extensions.DependencyInjection.AutofacServiceScope.ServiceProvider">
            <summary>
            Gets an <see cref="T:System.IServiceProvider" /> corresponding to this service scope.
            </summary>
            <value>
            An <see cref="T:System.IServiceProvider" /> that can be used to resolve dependencies from the scope.
            </value>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScope.Dispose">
            <summary>
            Disposes of the lifetime scope and resolved disposable services.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScope.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory">
            <summary>
            Autofac implementation of the ASP.NET Core <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory"/>.
            </summary>
            <seealso cref="T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory" />
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory.#ctor(Autofac.ILifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory"/> class.
            </summary>
            <param name="lifetimeScope">The lifetime scope.</param>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory.CreateScope">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" /> which contains an
            <see cref="T:System.IServiceProvider" /> used to resolve dependencies within
            the scope.
            </summary>
            <returns>
            An <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" /> controlling the lifetime of the scope. Once
            this is disposed, any scoped services that have been resolved
            from the <see cref="P:Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider" />
            will also be disposed.
            </returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extension methods on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1"/>.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.ServiceCollectionExtensions.AddAutofac(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder})">
            <summary>
            Adds the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProviderFactory"/> to the service collection. ONLY FOR PRE-ASP.NET 3.0 HOSTING. THIS WON'T WORK
            FOR ASP.NET CORE 3.0+ OR GENERIC HOSTING.
            </summary>
            <param name="services">The service collection to add the factory to.</param>
            <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder"/> that adds component registrations to the container.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.ServiceProviderExtensions">
            <summary>
            Extension methods for use with the <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Autofac.Extensions.DependencyInjection.ServiceProviderExtensions.GetAutofacRoot(System.IServiceProvider)">
            <summary>
            Tries to cast the instance of <see cref="T:Autofac.ILifetimeScope"/> from <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/> when possible.
            </summary>
            <param name="serviceProvider">The instance of <see cref="T:System.IServiceProvider"/>.</param>
            <exception cref="T:System.InvalidOperationException">Throws an <see cref="T:System.InvalidOperationException"/> when instance of <see cref="T:System.IServiceProvider"/> can't be assigned to <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/>.</exception>
            <returns>Returns the instance of <see cref="T:Autofac.ILifetimeScope"/> exposed by <see cref="T:Autofac.Extensions.DependencyInjection.AutofacServiceProvider"/>.</returns>
        </member>
        <member name="T:Autofac.Extensions.DependencyInjection.ServiceProviderExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Extensions.DependencyInjection.ServiceProviderExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Extensions.DependencyInjection.ServiceProviderExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Extensions.DependencyInjection.ServiceProviderExtensionsResources.WrongProviderType">
            <summary>
              Looks up a localized string similar to Unable to retrieve Autofac root lifetime scope from service provider of type {0}..
            </summary>
        </member>
    </members>
</doc>
